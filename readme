üß† CalorEase ‚Äì M√≥dulo de Nutrici√≥n con Google Gemini
Este m√≥dulo te permite consultar informaci√≥n nutricional sobre alimentos utilizando la API de Google Gemini. Est√° pensado para integrarse f√°cilmente a un proyecto existente en Node.js o para correrlo por separado en modo local.

üèÅ C√≥mo empezar (modo standalone)
üîß Requisitos previos
Node.js v16 o superior

Una API Key v√°lida de Google Gemini

npm para instalar dependencias

(Opcional) WAMP o similar si lo us√°s junto a PHP

üöÄ Instalaci√≥n r√°pida
Clon√° el proyecto (o copi√° solo el m√≥dulo Gemini):

bash

git clone https://github.com/tu-usuario/tu-repo.git
cd tu-repo
Instal√° las dependencias

bash

npm install
npm install cors
Configur√° la clave de API

Edit√° el archivo .env:

env

GEMINI_API_KEY=tu_clave_aqui
Arranc√° el servidor

bash

node server.js
Deber√≠as ver:

arduino

üîë GEMINI_API_KEY loaded? true
Servidor en http://localhost:3000
Probalo en el navegador

Abr√≠ http://localhost:3000, ingres√° un alimento (ej: "100g de arroz") y recib√≠ un JSON con macros estimados.

üîó Integraci√≥n a un proyecto Node.js m√°s grande
1. üóÇÔ∏è Organizaci√≥n de carpetas recomendada
bash

/tu-proyecto/
‚îÇ
‚îú‚îÄ‚îÄ gemini-nutricion/       ‚Üê m√≥dulo Gemini
‚îÇ   ‚îú‚îÄ‚îÄ frontend.js
‚îÇ   ‚îú‚îÄ‚îÄ server.js
‚îÇ   ‚îú‚îÄ‚îÄ .env
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ app.js                  ‚Üê entrypoint principal de tu app
‚îî‚îÄ‚îÄ package.json
2. üîå Montar el m√≥dulo desde el servidor principal
En app.js (tu servidor base), integr√° el m√≥dulo:

js

const express = require('express');
const path = require('path');
const app = express();

require('dotenv').config(); // carga .env principal
require('dotenv').config({ path: './gemini-nutricion/.env' }); // carga el .env de Gemini

const nutritionRouter = require('./gemini-nutricion/server');

app.use('/nutrition', nutritionRouter);
app.use('/nutrition', express.static(path.join(__dirname, 'gemini-nutricion')));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`App corriendo en http://localhost:${PORT}`));
3. üîÑ Ajustes en gemini-nutricion/server.js
Modific√° el archivo para exportar un router en lugar de lanzar el servidor:

js

const express = require('express');
const router = express.Router();
const cors = require('cors');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

router.use(cors());
router.use(express.json());

// Define la ruta POST
router.post('/generate', async (req, res) => {
  // l√≥gica de generaci√≥n con Gemini
});

module.exports = router;
Esto har√° que tu endpoint completo sea:
‚û°Ô∏è POST /nutrition/generate

4. üåê Servir frontend (opcional)
Con la configuraci√≥n anterior, pod√©s visitar:

bash

http://localhost:<puerto>/nutrition
Y el navegador cargar√° index.html, frontend.js, etc.

5. üîê CORS (opcional pero recomendado)
Para mayor seguridad, pod√©s limitar el origen desde donde se permite el acceso a la API Gemini:

js

router.use(cors({
  origin: ['http://localhost', 'http://calorease.com'],
  methods: ['POST'],
}));
6. üì¶ Manejo de dependencias
Opci√≥n A: Un solo package.json (recomendado)
Copi√° las dependencias del subm√≥dulo Gemini a tu package.json principal

Borr√° el package.json del subdirectorio

json

"dependencies": {
  "express": "^4.x",
  "cors": "^2.x",
  "node-fetch": "^3.x"
}
bash

npm install
Opci√≥n B: Dos package.json (uno por m√≥dulo)
Ejecut√°:

bash

cd gemini-nutricion
npm install
cd ..
npm install
Y asegurate de arrancar ambos con PM2, Docker o concurrently.

‚úÖ Resultado esperado
Una vez integrado, tu proyecto puede hacer una petici√≥n como:

js

fetch('/nutrition/generate', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ prompt: '50g de avena con leche' })
})
Y recib√≠s:

json

{
  "calor√≠as": 195,
  "carbohidratos": 33.8,
  "grasas": 3.6,
  "prote√≠nas": 6.6
}